@using SkillfullWebUI.Models.UserSkillsModels;

@model List<UserSkillModel>

    @ViewBag.InfoMessage
@if(Model != null)
{
    <div class="container-lg d-flex align-content-lg-stretch g-3">
    <div class="col">
    @foreach (var skill in Model)
    {
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">@skill.SkillName</h4>
                <div><p>Your assessment: @skill.SkillAssessmentId</p></div>
                <div><p>Your target: @skill.TargetSkillAssessmentId</p></div>
                <span><img class="tooltip-icon" src="~/assets/information.png" data-bs-toggle="tooltip" data-bs-placement="right" title="1 - can't do shit; 2 - know a little; 3 - can do but with help; 4 - can do alone; 5 - can teach others'" /></span>

                <a class="btn btn-primary" href="@Url.Action("UpdateUserSkill", "UserSkills", new {userSkillId = skill.UserSkillId, skillName = skill.SkillName})">Update</a>
                <a class="btn btn-primary" href="@Url.Action("AddUserSkillTask", "UserSkills", new {userSkillId = skill.UserSkillId, userSkillName = skill.SkillName})">Add task</a>
                <a class="btn btn-primary" href="@Url.Action("DeleteUserSkill", "UserSkills", new {userSkillId = skill.UserSkillId})">Delete</a>
                <a class="btn btn-primary" href="@Url.Action("GetAllUserSkillTasks_Skill", "UserSkills", new {userSkillId = skill.UserSkillId, userSkillName = skill.SkillName})">Show tasks</a>

            </div>
        </div>
    }
    </div>
    <div class="container-md col">
    <canvas id="radarChart"></canvas>
    </div>
    </div>

}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"
        integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
        crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('radarChart');
    let SkillNames = [];
    let SkillAssessments = [];
    let TargetSkillAssessments = [];

    @if (Model != null && Model.Count > 0)
    {
        @foreach(var skill in Model)
        {
            @:SkillNames.push("@skill.SkillName");
            @:SkillAssessments.push(@skill.SkillAssessmentId);
            @:TargetSkillAssessments.push(@skill.TargetSkillAssessmentId);
        }
    }

        const data = {
            labels: SkillNames,
            datasets: [{
                label: "Skill Assessments",
                data: SkillAssessments,
                fill: true,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgb(255, 99, 132)',
                pointBackgroundColor: 'rgb(255, 99, 132)',
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: 'rgb(255, 99, 132)'
            },
                {
                label: "Target Skill Assessments",
                data: TargetSkillAssessments,
                fill: false,
                backgroundColor: 'rgba(0, 204, 161, 0.2)',
                borderColor: 'rgb(0, 204, 161)',
                pointBackgroundColor: 'rgb(0, 204, 161)',
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: 'rgb(0, 204, 161)'
            }]
        }
        const config = {
        type: 'radar',
        data: data,
        options: {
            elements: {
                line: {
                    borderWidth: 3
                }
            },
            scales: {
                r: {
                    beginAtZero: true,
                    min: 0,
                    max: 5,
                    suggestedMin: 0,
                    suggestedMax: 5,
                    stepSize: 1,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            spanGaps: true,
        },
    };

    new Chart(ctx, config);
</script>